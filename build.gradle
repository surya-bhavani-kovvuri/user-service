plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'info.solidsoft.pitest' version '1.15.0'
}

group = 'com.smarthealth'
version = '0.0.1-SNAPSHOT'
jacoco {
	toolVersion = "0.8.11" // Latest version
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
}

dependencies {
//	This is the foundation for building RESTful web services.
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// This helps in registering our microservice to eureka
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	//Converting Java objects ↔️ Database tables automatically.(ORM - Object Relational mapping using Hibernate + JPA)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//connects to postgresql database
	runtimeOnly  'org.postgresql:postgresql:42.7.7'
//	Enable live-reload for faster dev
	implementation 'org.springframework.boot:spring-boot-devtools'
	//	Avoid boilerplate (getters/setters/builders)
	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	//Unit & integration testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	runtimeOnly 'com.h2database:h2'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // generate report after tests
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

pitest {
	targetClasses = ['com.smarthealth.user_service.service.*'] // replace with your actual package
	targetTests = ['com.smarthealth.user_service.service.*']   // test package (optional if same as above)
	threads = 4
	outputFormats = ['HTML', 'XML']
	timestampedReports = false
}
